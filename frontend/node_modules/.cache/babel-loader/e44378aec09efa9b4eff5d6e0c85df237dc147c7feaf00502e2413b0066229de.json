{"ast":null,"code":"// Configuration de l'API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Headers par défaut\nconst getDefaultHeaders = () => {\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n\n  // Ajouter le token d'authentification s'il existe\n  const token = localStorage.getItem(\"token\") || localStorage.getItem(\"authToken\");\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n    console.log(\"Token d'authentification ajouté:\", token.substring(0, 20) + \"...\");\n  } else {\n    console.log(\"Aucun token d'authentification trouvé\");\n  }\n  return headers;\n};\n\n// Fonction utilitaire pour les appels API\nconst apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  console.log('API Call - URL:', url);\n  console.log('API Call - Options:', options);\n  const config = {\n    headers: getDefaultHeaders(),\n    ...options\n  };\n  try {\n    console.log('API Call - Config:', config);\n    const response = await fetch(url, config);\n    console.log('API Call - Response status:', response.status);\n    console.log('API Call - Response ok:', response.ok);\n    const data = await response.json();\n    console.log('API Call - Response data:', data);\n\n    // Gérer les erreurs HTTP\n    if (!response.ok) {\n      console.error('API Call - HTTP Error:', response.status, data);\n      if (data.errors && Array.isArray(data.errors)) {\n        console.error('API Call - Validation errors:', data.errors);\n      }\n      throw new Error(data.message || `Erreur ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    console.error(\"Erreur API:\", error);\n    console.error(\"Erreur API - URL:\", url);\n    console.error(\"Erreur API - Config:\", config);\n    throw error;\n  }\n};\n\n// Méthodes HTTP\nconst api = {\n  get: endpoint => apiCall(endpoint, {\n    method: \"GET\"\n  }),\n  post: (endpoint, body) => apiCall(endpoint, {\n    method: \"POST\",\n    body: JSON.stringify(body)\n  }),\n  put: (endpoint, body) => apiCall(endpoint, {\n    method: \"PUT\",\n    body: JSON.stringify(body)\n  }),\n  delete: endpoint => apiCall(endpoint, {\n    method: \"DELETE\"\n  })\n};\nexport default api;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","getDefaultHeaders","headers","token","localStorage","getItem","console","log","substring","apiCall","endpoint","options","url","config","response","fetch","status","ok","data","json","error","errors","Array","isArray","Error","message","api","get","method","post","body","JSON","stringify","put","delete"],"sources":["C:/Users/LENOVO/Desktop/eTabax/frontend/src/api/config.js"],"sourcesContent":["// Configuration de l'API\nconst API_BASE_URL =\n  process.env.REACT_APP_API_URL || \"http://localhost:5000/api\";\n\n// Headers par défaut\nconst getDefaultHeaders = () => {\n  const headers = {\n    \"Content-Type\": \"application/json\",\n  };\n\n  // Ajouter le token d'authentification s'il existe\n  const token =\n    localStorage.getItem(\"token\") || localStorage.getItem(\"authToken\");\n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n    console.log(\"Token d'authentification ajouté:\", token.substring(0, 20) + \"...\");\n  } else {\n    console.log(\"Aucun token d'authentification trouvé\");\n  }\n\n  return headers;\n};\n\n// Fonction utilitaire pour les appels API\nconst apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  console.log('API Call - URL:', url);\n  console.log('API Call - Options:', options);\n\n  const config = {\n    headers: getDefaultHeaders(),\n    ...options,\n  };\n\n  try {\n    console.log('API Call - Config:', config);\n    const response = await fetch(url, config);\n    console.log('API Call - Response status:', response.status);\n    console.log('API Call - Response ok:', response.ok);\n    \n    const data = await response.json();\n    console.log('API Call - Response data:', data);\n\n    // Gérer les erreurs HTTP\n    if (!response.ok) {\n      console.error('API Call - HTTP Error:', response.status, data);\n      if (data.errors && Array.isArray(data.errors)) {\n        console.error('API Call - Validation errors:', data.errors);\n      }\n      throw new Error(data.message || `Erreur ${response.status}`);\n    }\n\n    return data;\n  } catch (error) {\n    console.error(\"Erreur API:\", error);\n    console.error(\"Erreur API - URL:\", url);\n    console.error(\"Erreur API - Config:\", config);\n    throw error;\n  }\n};\n\n// Méthodes HTTP\nconst api = {\n  get: (endpoint) => apiCall(endpoint, { method: \"GET\" }),\n\n  post: (endpoint, body) =>\n    apiCall(endpoint, {\n      method: \"POST\",\n      body: JSON.stringify(body),\n    }),\n\n  put: (endpoint, body) =>\n    apiCall(endpoint, {\n      method: \"PUT\",\n      body: JSON.stringify(body),\n    }),\n\n  delete: (endpoint) => apiCall(endpoint, { method: \"DELETE\" }),\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
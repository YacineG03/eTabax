{"ast":null,"code":"import api from './config';\n\n// Configuration des endpoints fournisseur\nconst FOURNISSEUR_API = {\n  // Produits\n  PRODUCTS: '/api/fournisseur/products',\n  PRODUCT: id => `/api/fournisseur/products/${id}`,\n  // Commandes\n  ORDERS: '/api/fournisseur/orders',\n  ORDER_STATUS: id => `/api/fournisseur/orders/${id}/status`,\n  // Statistiques\n  STATS: '/api/fournisseur/stats'\n};\n\n/**\r\n * API Fournisseur - Gestion des produits\r\n */\n\n// Récupérer tous les produits du fournisseur\nexport const getFournisseurProducts = async () => {\n  try {\n    const response = await apiClient.get(FOURNISSEUR_API.PRODUCTS);\n    return response.data;\n  } catch (error) {\n    console.error('Erreur récupération produits fournisseur:', error);\n    throw error;\n  }\n};\n\n// Récupérer un produit spécifique\nexport const getFournisseurProduct = async productId => {\n  try {\n    const response = await apiClient.get(FOURNISSEUR_API.PRODUCT(productId));\n    return response.data;\n  } catch (error) {\n    console.error('Erreur récupération produit fournisseur:', error);\n    throw error;\n  }\n};\n\n// Créer un nouveau produit\nexport const createFournisseurProduct = async productData => {\n  try {\n    const response = await apiClient.post(FOURNISSEUR_API.PRODUCTS, productData);\n    return response.data;\n  } catch (error) {\n    console.error('Erreur création produit fournisseur:', error);\n    throw error;\n  }\n};\n\n// Mettre à jour un produit\nexport const updateFournisseurProduct = async (productId, productData) => {\n  try {\n    const response = await apiClient.put(FOURNISSEUR_API.PRODUCT(productId), productData);\n    return response.data;\n  } catch (error) {\n    console.error('Erreur mise à jour produit fournisseur:', error);\n    throw error;\n  }\n};\n\n// Supprimer un produit\nexport const deleteFournisseurProduct = async productId => {\n  try {\n    const response = await apiClient.delete(FOURNISSEUR_API.PRODUCT(productId));\n    return response.data;\n  } catch (error) {\n    console.error('Erreur suppression produit fournisseur:', error);\n    throw error;\n  }\n};\n\n/**\r\n * API Fournisseur - Gestion des commandes\r\n */\n\n// Récupérer toutes les commandes du fournisseur\nexport const getFournisseurOrders = async () => {\n  try {\n    const response = await apiClient.get(FOURNISSEUR_API.ORDERS);\n    return response.data;\n  } catch (error) {\n    console.error('Erreur récupération commandes fournisseur:', error);\n    throw error;\n  }\n};\n\n// Mettre à jour le statut d'une commande\nexport const updateFournisseurOrderStatus = async (orderId, status) => {\n  try {\n    const response = await apiClient.put(FOURNISSEUR_API.ORDER_STATUS(orderId), {\n      statut: status\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Erreur mise à jour statut commande fournisseur:', error);\n    throw error;\n  }\n};\n\n/**\r\n * API Fournisseur - Statistiques\r\n */\n\n// Récupérer les statistiques du fournisseur\nexport const getFournisseurStats = async () => {\n  try {\n    const response = await apiClient.get(FOURNISSEUR_API.STATS);\n    return response.data;\n  } catch (error) {\n    console.error('Erreur récupération statistiques fournisseur:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Utilitaires pour les produits\r\n */\n\n// Catégories de produits disponibles\nexport const PRODUCT_CATEGORIES = [{\n  value: 'ciment',\n  label: 'Ciment'\n}, {\n  value: 'outils',\n  label: 'Outils'\n}, {\n  value: 'equipements-securite',\n  label: 'Équipements de Sécurité'\n}, {\n  value: 'materiaux-construction',\n  label: 'Matériaux de Construction'\n}, {\n  value: 'machines',\n  label: 'Machines'\n}, {\n  value: 'autres',\n  label: 'Autres'\n}];\n\n// Statuts de produits disponibles\nexport const PRODUCT_STATUS = [{\n  value: 'actif',\n  label: 'Actif'\n}, {\n  value: 'inactif',\n  label: 'Inactif'\n}, {\n  value: 'rupture',\n  label: 'Rupture de Stock'\n}];\n\n// Statuts de commandes disponibles\nexport const ORDER_STATUS = [{\n  value: 'en-attente',\n  label: 'En Attente'\n}, {\n  value: 'confirmee',\n  label: 'Confirmée'\n}, {\n  value: 'en-preparation',\n  label: 'En Préparation'\n}, {\n  value: 'expediee',\n  label: 'Expédiée'\n}, {\n  value: 'livree',\n  label: 'Livrée'\n}, {\n  value: 'annulee',\n  label: 'Annulée'\n}];\n\n// Fonction pour formater le prix\nexport const formatPrice = price => {\n  return new Intl.NumberFormat('fr-FR', {\n    style: 'currency',\n    currency: 'XOF'\n  }).format(price);\n};\n\n// Fonction pour obtenir le label d'une catégorie\nexport const getCategoryLabel = categoryValue => {\n  const category = PRODUCT_CATEGORIES.find(cat => cat.value === categoryValue);\n  return category ? category.label : categoryValue;\n};\n\n// Fonction pour obtenir le label d'un statut de produit\nexport const getProductStatusLabel = statusValue => {\n  const status = PRODUCT_STATUS.find(st => st.value === statusValue);\n  return status ? status.label : statusValue;\n};\n\n// Fonction pour obtenir le label d'un statut de commande\nexport const getOrderStatusLabel = statusValue => {\n  const status = ORDER_STATUS.find(st => st.value === statusValue);\n  return status ? status.label : statusValue;\n};","map":{"version":3,"names":["api","FOURNISSEUR_API","PRODUCTS","PRODUCT","id","ORDERS","ORDER_STATUS","STATS","getFournisseurProducts","response","apiClient","get","data","error","console","getFournisseurProduct","productId","createFournisseurProduct","productData","post","updateFournisseurProduct","put","deleteFournisseurProduct","delete","getFournisseurOrders","updateFournisseurOrderStatus","orderId","status","statut","getFournisseurStats","PRODUCT_CATEGORIES","value","label","PRODUCT_STATUS","formatPrice","price","Intl","NumberFormat","style","currency","format","getCategoryLabel","categoryValue","category","find","cat","getProductStatusLabel","statusValue","st","getOrderStatusLabel"],"sources":["C:/Users/adjas/OneDrive/Bureau/eTabax/frontend/src/api/fournisseur.js"],"sourcesContent":["import api from './config';\r\n\r\n// Configuration des endpoints fournisseur\r\nconst FOURNISSEUR_API = {\r\n  // Produits\r\n  PRODUCTS: '/api/fournisseur/products',\r\n  PRODUCT: (id) => `/api/fournisseur/products/${id}`,\r\n  \r\n  // Commandes\r\n  ORDERS: '/api/fournisseur/orders',\r\n  ORDER_STATUS: (id) => `/api/fournisseur/orders/${id}/status`,\r\n  \r\n  // Statistiques\r\n  STATS: '/api/fournisseur/stats'\r\n};\r\n\r\n/**\r\n * API Fournisseur - Gestion des produits\r\n */\r\n\r\n// Récupérer tous les produits du fournisseur\r\nexport const getFournisseurProducts = async () => {\r\n  try {\r\n    const response = await apiClient.get(FOURNISSEUR_API.PRODUCTS);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur récupération produits fournisseur:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Récupérer un produit spécifique\r\nexport const getFournisseurProduct = async (productId) => {\r\n  try {\r\n    const response = await apiClient.get(FOURNISSEUR_API.PRODUCT(productId));\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur récupération produit fournisseur:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Créer un nouveau produit\r\nexport const createFournisseurProduct = async (productData) => {\r\n  try {\r\n    const response = await apiClient.post(FOURNISSEUR_API.PRODUCTS, productData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur création produit fournisseur:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Mettre à jour un produit\r\nexport const updateFournisseurProduct = async (productId, productData) => {\r\n  try {\r\n    const response = await apiClient.put(FOURNISSEUR_API.PRODUCT(productId), productData);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur mise à jour produit fournisseur:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Supprimer un produit\r\nexport const deleteFournisseurProduct = async (productId) => {\r\n  try {\r\n    const response = await apiClient.delete(FOURNISSEUR_API.PRODUCT(productId));\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur suppression produit fournisseur:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * API Fournisseur - Gestion des commandes\r\n */\r\n\r\n// Récupérer toutes les commandes du fournisseur\r\nexport const getFournisseurOrders = async () => {\r\n  try {\r\n    const response = await apiClient.get(FOURNISSEUR_API.ORDERS);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur récupération commandes fournisseur:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Mettre à jour le statut d'une commande\r\nexport const updateFournisseurOrderStatus = async (orderId, status) => {\r\n  try {\r\n    const response = await apiClient.put(FOURNISSEUR_API.ORDER_STATUS(orderId), {\r\n      statut: status\r\n    });\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur mise à jour statut commande fournisseur:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * API Fournisseur - Statistiques\r\n */\r\n\r\n// Récupérer les statistiques du fournisseur\r\nexport const getFournisseurStats = async () => {\r\n  try {\r\n    const response = await apiClient.get(FOURNISSEUR_API.STATS);\r\n    return response.data;\r\n  } catch (error) {\r\n    console.error('Erreur récupération statistiques fournisseur:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Utilitaires pour les produits\r\n */\r\n\r\n// Catégories de produits disponibles\r\nexport const PRODUCT_CATEGORIES = [\r\n  { value: 'ciment', label: 'Ciment' },\r\n  { value: 'outils', label: 'Outils' },\r\n  { value: 'equipements-securite', label: 'Équipements de Sécurité' },\r\n  { value: 'materiaux-construction', label: 'Matériaux de Construction' },\r\n  { value: 'machines', label: 'Machines' },\r\n  { value: 'autres', label: 'Autres' }\r\n];\r\n\r\n// Statuts de produits disponibles\r\nexport const PRODUCT_STATUS = [\r\n  { value: 'actif', label: 'Actif' },\r\n  { value: 'inactif', label: 'Inactif' },\r\n  { value: 'rupture', label: 'Rupture de Stock' }\r\n];\r\n\r\n// Statuts de commandes disponibles\r\nexport const ORDER_STATUS = [\r\n  { value: 'en-attente', label: 'En Attente' },\r\n  { value: 'confirmee', label: 'Confirmée' },\r\n  { value: 'en-preparation', label: 'En Préparation' },\r\n  { value: 'expediee', label: 'Expédiée' },\r\n  { value: 'livree', label: 'Livrée' },\r\n  { value: 'annulee', label: 'Annulée' }\r\n];\r\n\r\n// Fonction pour formater le prix\r\nexport const formatPrice = (price) => {\r\n  return new Intl.NumberFormat('fr-FR', {\r\n    style: 'currency',\r\n    currency: 'XOF'\r\n  }).format(price);\r\n};\r\n\r\n// Fonction pour obtenir le label d'une catégorie\r\nexport const getCategoryLabel = (categoryValue) => {\r\n  const category = PRODUCT_CATEGORIES.find(cat => cat.value === categoryValue);\r\n  return category ? category.label : categoryValue;\r\n};\r\n\r\n// Fonction pour obtenir le label d'un statut de produit\r\nexport const getProductStatusLabel = (statusValue) => {\r\n  const status = PRODUCT_STATUS.find(st => st.value === statusValue);\r\n  return status ? status.label : statusValue;\r\n};\r\n\r\n// Fonction pour obtenir le label d'un statut de commande\r\nexport const getOrderStatusLabel = (statusValue) => {\r\n  const status = ORDER_STATUS.find(st => st.value === statusValue);\r\n  return status ? status.label : statusValue;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import api from \"./config\";\n\n// Service d'authentification\nconst authAPI = {\n  // Inscription d'un nouvel utilisateur\n  register: async userData => {\n    try {\n      const response = await api.post(\"/auth/register\", userData);\n\n      // Sauvegarder le token dans localStorage\n      if (response.success && response.data.token) {\n        localStorage.setItem(\"authToken\", response.data.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Connexion d'un utilisateur\n  login: async credentials => {\n    try {\n      const response = await api.post(\"/auth/login\", credentials);\n\n      // Sauvegarder le token dans localStorage\n      if (response.success && response.data.token) {\n        localStorage.setItem(\"authToken\", response.data.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Récupérer le profil utilisateur\n  getProfile: async () => {\n    try {\n      const response = await api.get(\"/fournisseur/profil\"); // <-- Correction ici\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Déconnexion\n  logout: async () => {\n    try {\n      const response = await api.post(\"/auth/logout\");\n\n      // Supprimer les données de localStorage\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"user\");\n      return response;\n    } catch (error) {\n      // Même en cas d'erreur, supprimer les données locales\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"user\");\n      throw error;\n    }\n  },\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    const token = localStorage.getItem(\"authToken\");\n    const user = localStorage.getItem(\"user\");\n    return !!(token && user);\n  },\n  // Récupérer les données utilisateur du localStorage\n  getCurrentUser: () => {\n    const user = localStorage.getItem(\"user\");\n    return user ? JSON.parse(user) : null;\n  },\n  // Mettre à jour les données utilisateur dans localStorage\n  updateUserData: userData => {\n    const currentUser = authAPI.getCurrentUser();\n    if (currentUser) {\n      const updatedUser = {\n        ...currentUser,\n        ...userData\n      };\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n    }\n  },\n  // Supprimer le token (pour forcer la déconnexion)\n  clearAuth: () => {\n    localStorage.removeItem(\"authToken\");\n    localStorage.removeItem(\"user\");\n  }\n};\nconst loginWithSocial = async data => {\n  try {\n    const response = await fetch(\"/auth/social-login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    return await response.json();\n  } catch (e) {\n    return {\n      success: false,\n      message: \"Erreur réseau.\"\n    };\n  }\n};\nexport default authAPI;","map":{"version":3,"names":["api","authAPI","register","userData","response","post","success","data","token","localStorage","setItem","JSON","stringify","error","login","credentials","getProfile","get","logout","removeItem","isAuthenticated","getItem","user","getCurrentUser","parse","updateUserData","currentUser","updatedUser","clearAuth","loginWithSocial","fetch","method","headers","body","json","e","message"],"sources":["C:/Users/adjas/OneDrive/Bureau/eTabax/frontend/src/api/auth.js"],"sourcesContent":["import api from \"./config\";\r\n\r\n// Service d'authentification\r\nconst authAPI = {\r\n  // Inscription d'un nouvel utilisateur\r\n  register: async (userData) => {\r\n    try {\r\n      const response = await api.post(\"/auth/register\", userData);\r\n\r\n      // Sauvegarder le token dans localStorage\r\n      if (response.success && response.data.token) {\r\n        localStorage.setItem(\"authToken\", response.data.token);\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Connexion d'un utilisateur\r\n  login: async (credentials) => {\r\n    try {\r\n      const response = await api.post(\"/auth/login\", credentials);\r\n\r\n      // Sauvegarder le token dans localStorage\r\n      if (response.success && response.data.token) {\r\n        localStorage.setItem(\"authToken\", response.data.token);\r\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\r\n      }\r\n\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Récupérer le profil utilisateur\r\n  getProfile: async () => {\r\n    try {\r\n      const response = await api.get(\"/fournisseur/profil\"); // <-- Correction ici\r\n      return response;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Déconnexion\r\n  logout: async () => {\r\n    try {\r\n      const response = await api.post(\"/auth/logout\");\r\n\r\n      // Supprimer les données de localStorage\r\n      localStorage.removeItem(\"authToken\");\r\n      localStorage.removeItem(\"user\");\r\n\r\n      return response;\r\n    } catch (error) {\r\n      // Même en cas d'erreur, supprimer les données locales\r\n      localStorage.removeItem(\"authToken\");\r\n      localStorage.removeItem(\"user\");\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Vérifier si l'utilisateur est connecté\r\n  isAuthenticated: () => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n    const user = localStorage.getItem(\"user\");\r\n    return !!(token && user);\r\n  },\r\n\r\n  // Récupérer les données utilisateur du localStorage\r\n  getCurrentUser: () => {\r\n    const user = localStorage.getItem(\"user\");\r\n    return user ? JSON.parse(user) : null;\r\n  },\r\n\r\n  // Mettre à jour les données utilisateur dans localStorage\r\n  updateUserData: (userData) => {\r\n    const currentUser = authAPI.getCurrentUser();\r\n    if (currentUser) {\r\n      const updatedUser = { ...currentUser, ...userData };\r\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\r\n    }\r\n  },\r\n\r\n  // Supprimer le token (pour forcer la déconnexion)\r\n  clearAuth: () => {\r\n    localStorage.removeItem(\"authToken\");\r\n    localStorage.removeItem(\"user\");\r\n  },\r\n};\r\n\r\nconst loginWithSocial = async (data) => {\r\n  try {\r\n    const response = await fetch(\"/auth/social-login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(data),\r\n    });\r\n    return await response.json();\r\n  } catch (e) {\r\n    return { success: false, message: \"Erreur réseau.\" };\r\n  }\r\n};\r\n\r\nexport default authAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"// Configuration de l'API\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\n\n// Headers par défaut\nconst getDefaultHeaders = () => {\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n\n  // Ajouter le token d'authentification s'il existe\n  // Essayer tous les types de tokens possibles\n  const firebaseToken = localStorage.getItem('firebaseToken');\n  const authToken = localStorage.getItem('authToken');\n  const token = localStorage.getItem('token'); // Token standard utilisé par Login.jsx\n  const finalToken = firebaseToken || authToken || token;\n  if (finalToken) {\n    headers['Authorization'] = `Bearer ${finalToken}`;\n  }\n  return headers;\n};\n\n// Fonction utilitaire pour les appels API\nconst apiCall = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    headers: getDefaultHeaders(),\n    ...options\n  };\n  try {\n    const response = await fetch(url, config);\n    const data = await response.json();\n\n    // Gérer les erreurs HTTP\n    if (!response.ok) {\n      throw new Error(data.message || `Erreur ${response.status}`);\n    }\n    return data;\n  } catch (error) {\n    console.error('Erreur API:', error);\n    throw error;\n  }\n};\n\n// Méthodes HTTP\nconst api = {\n  get: endpoint => apiCall(endpoint, {\n    method: 'GET'\n  }),\n  post: (endpoint, body) => apiCall(endpoint, {\n    method: 'POST',\n    body: JSON.stringify(body)\n  }),\n  put: (endpoint, body) => apiCall(endpoint, {\n    method: 'PUT',\n    body: JSON.stringify(body)\n  }),\n  delete: endpoint => apiCall(endpoint, {\n    method: 'DELETE'\n  })\n};\n\n// Client API compatible avec axios pour les nouveaux composants\nconst apiClient = {\n  get: async endpoint => {\n    const response = await apiCall(endpoint, {\n      method: 'GET'\n    });\n    return {\n      data: response\n    };\n  },\n  post: async (endpoint, body) => {\n    const response = await apiCall(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(body)\n    });\n    return {\n      data: response\n    };\n  },\n  put: async (endpoint, body) => {\n    const response = await apiCall(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(body)\n    });\n    return {\n      data: response\n    };\n  },\n  delete: async endpoint => {\n    const response = await apiCall(endpoint, {\n      method: 'DELETE'\n    });\n    return {\n      data: response\n    };\n  }\n};\nexport default api;\nexport { apiClient };","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","getDefaultHeaders","headers","firebaseToken","localStorage","getItem","authToken","token","finalToken","apiCall","endpoint","options","url","config","response","fetch","data","json","ok","Error","message","status","error","console","api","get","method","post","body","JSON","stringify","put","delete","apiClient"],"sources":["C:/Users/USER/Documents/Hackathon/eTabax/frontend/src/api/config.js"],"sourcesContent":["// Configuration de l'API\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\n// Headers par défaut\r\nconst getDefaultHeaders = () => {\r\n  const headers = {\r\n    'Content-Type': 'application/json',\r\n  };\r\n\r\n  // Ajouter le token d'authentification s'il existe\r\n  // Essayer tous les types de tokens possibles\r\n  const firebaseToken = localStorage.getItem('firebaseToken');\r\n  const authToken = localStorage.getItem('authToken');\r\n  const token = localStorage.getItem('token'); // Token standard utilisé par Login.jsx\r\n  const finalToken = firebaseToken || authToken || token;\r\n  \r\n  if (finalToken) {\r\n    headers['Authorization'] = `Bearer ${finalToken}`;\r\n  }\r\n\r\n  return headers;\r\n};\r\n\r\n// Fonction utilitaire pour les appels API\r\nconst apiCall = async (endpoint, options = {}) => {\r\n  const url = `${API_BASE_URL}${endpoint}`;\r\n  \r\n  const config = {\r\n    headers: getDefaultHeaders(),\r\n    ...options,\r\n  };\r\n\r\n  try {\r\n    const response = await fetch(url, config);\r\n    const data = await response.json();\r\n\r\n    // Gérer les erreurs HTTP\r\n    if (!response.ok) {\r\n      throw new Error(data.message || `Erreur ${response.status}`);\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error('Erreur API:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Méthodes HTTP\r\nconst api = {\r\n  get: (endpoint) => apiCall(endpoint, { method: 'GET' }),\r\n  \r\n  post: (endpoint, body) => apiCall(endpoint, {\r\n    method: 'POST',\r\n    body: JSON.stringify(body),\r\n  }),\r\n  \r\n  put: (endpoint, body) => apiCall(endpoint, {\r\n    method: 'PUT',\r\n    body: JSON.stringify(body),\r\n  }),\r\n  \r\n  delete: (endpoint) => apiCall(endpoint, { method: 'DELETE' }),\r\n};\r\n\r\n// Client API compatible avec axios pour les nouveaux composants\r\nconst apiClient = {\r\n  get: async (endpoint) => {\r\n    const response = await apiCall(endpoint, { method: 'GET' });\r\n    return { data: response };\r\n  },\r\n  \r\n  post: async (endpoint, body) => {\r\n    const response = await apiCall(endpoint, {\r\n      method: 'POST',\r\n      body: JSON.stringify(body),\r\n    });\r\n    return { data: response };\r\n  },\r\n  \r\n  put: async (endpoint, body) => {\r\n    const response = await apiCall(endpoint, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(body),\r\n    });\r\n    return { data: response };\r\n  },\r\n  \r\n  delete: async (endpoint) => {\r\n    const response = await apiCall(endpoint, { method: 'DELETE' });\r\n    return { data: response };\r\n  },\r\n};\r\n\r\nexport default api;\r\nexport { apiClient }; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
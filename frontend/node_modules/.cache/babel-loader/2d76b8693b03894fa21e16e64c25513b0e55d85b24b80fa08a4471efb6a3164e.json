{"ast":null,"code":"import api from \"./config\";\n\n// Service d'authentification\nconst authAPI = {\n  // Inscription d'un nouvel utilisateur\n  register: async userData => {\n    try {\n      const response = await api.post(\"/auth/register\", userData);\n\n      // Sauvegarder le token dans localStorage\n      if (response.success && response.data.token) {\n        localStorage.setItem(\"authToken\", response.data.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Connexion d'un utilisateur\n  login: async credentials => {\n    try {\n      const response = await api.post(\"/auth/login\", credentials);\n\n      // Sauvegarder le token dans localStorage\n      if (response.success && response.data && response.data.token) {\n        localStorage.setItem(\"authToken\", response.data.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      } else if (response.token) {\n        // Format alternatif du backend\n        localStorage.setItem(\"authToken\", response.token);\n        localStorage.setItem(\"user\", JSON.stringify(response));\n      }\n      return response;\n    } catch (error) {\n      console.error(\"Erreur de connexion:\", error);\n      throw error;\n    }\n  },\n  // Récupérer le profil utilisateur\n  getProfile: async () => {\n    try {\n      const response = await api.get(\"/fournisseur/profil\"); // <-- Correction ici\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Déconnexion\n  logout: async () => {\n    try {\n      const response = await api.post(\"/auth/logout\");\n\n      // Supprimer les données de localStorage\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"user\");\n      return response;\n    } catch (error) {\n      // Même en cas d'erreur, supprimer les données locales\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"user\");\n      throw error;\n    }\n  },\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    const token = localStorage.getItem(\"authToken\");\n    const user = localStorage.getItem(\"user\");\n    return !!(token && user);\n  },\n  // Récupérer les données utilisateur du localStorage\n  getCurrentUser: () => {\n    const user = localStorage.getItem(\"user\");\n    return user ? JSON.parse(user) : null;\n  },\n  // Mettre à jour les données utilisateur dans localStorage\n  updateUserData: userData => {\n    const currentUser = authAPI.getCurrentUser();\n    if (currentUser) {\n      const updatedUser = {\n        ...currentUser,\n        ...userData\n      };\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n    }\n  },\n  // Supprimer le token (pour forcer la déconnexion)\n  clearAuth: () => {\n    localStorage.removeItem(\"authToken\");\n    localStorage.removeItem(\"user\");\n  }\n};\nconst loginWithSocial = async data => {\n  try {\n    const response = await fetch(\"/auth/social-login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    return await response.json();\n  } catch (e) {\n    return {\n      success: false,\n      message: \"Erreur réseau.\"\n    };\n  }\n};\nexport default authAPI;","map":{"version":3,"names":["api","authAPI","register","userData","response","post","success","data","token","localStorage","setItem","JSON","stringify","error","login","credentials","console","getProfile","get","logout","removeItem","isAuthenticated","getItem","user","getCurrentUser","parse","updateUserData","currentUser","updatedUser","clearAuth","loginWithSocial","fetch","method","headers","body","json","e","message"],"sources":["C:/Users/LENOVO/Desktop/eTabax/frontend/src/api/auth.js"],"sourcesContent":["import api from \"./config\";\n\n// Service d'authentification\nconst authAPI = {\n  // Inscription d'un nouvel utilisateur\n  register: async (userData) => {\n    try {\n      const response = await api.post(\"/auth/register\", userData);\n\n      // Sauvegarder le token dans localStorage\n      if (response.success && response.data.token) {\n        localStorage.setItem(\"authToken\", response.data.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      }\n\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Connexion d'un utilisateur\n  login: async (credentials) => {\n    try {\n      const response = await api.post(\"/auth/login\", credentials);\n\n      // Sauvegarder le token dans localStorage\n      if (response.success && response.data && response.data.token) {\n        localStorage.setItem(\"authToken\", response.data.token);\n        localStorage.setItem(\"user\", JSON.stringify(response.data));\n      } else if (response.token) {\n        // Format alternatif du backend\n        localStorage.setItem(\"authToken\", response.token);\n        localStorage.setItem(\"user\", JSON.stringify(response));\n      }\n\n      return response;\n    } catch (error) {\n      console.error(\"Erreur de connexion:\", error);\n      throw error;\n    }\n  },\n\n  // Récupérer le profil utilisateur\n  getProfile: async () => {\n    try {\n      const response = await api.get(\"/fournisseur/profil\"); // <-- Correction ici\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n\n  // Déconnexion\n  logout: async () => {\n    try {\n      const response = await api.post(\"/auth/logout\");\n\n      // Supprimer les données de localStorage\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"user\");\n\n      return response;\n    } catch (error) {\n      // Même en cas d'erreur, supprimer les données locales\n      localStorage.removeItem(\"authToken\");\n      localStorage.removeItem(\"user\");\n      throw error;\n    }\n  },\n\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    const token = localStorage.getItem(\"authToken\");\n    const user = localStorage.getItem(\"user\");\n    return !!(token && user);\n  },\n\n  // Récupérer les données utilisateur du localStorage\n  getCurrentUser: () => {\n    const user = localStorage.getItem(\"user\");\n    return user ? JSON.parse(user) : null;\n  },\n\n  // Mettre à jour les données utilisateur dans localStorage\n  updateUserData: (userData) => {\n    const currentUser = authAPI.getCurrentUser();\n    if (currentUser) {\n      const updatedUser = { ...currentUser, ...userData };\n      localStorage.setItem(\"user\", JSON.stringify(updatedUser));\n    }\n  },\n\n  // Supprimer le token (pour forcer la déconnexion)\n  clearAuth: () => {\n    localStorage.removeItem(\"authToken\");\n    localStorage.removeItem(\"user\");\n  },\n};\n\nconst loginWithSocial = async (data) => {\n  try {\n    const response = await fetch(\"/auth/social-login\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(data),\n    });\n    return await response.json();\n  } catch (e) {\n    return { success: false, message: \"Erreur réseau.\" };\n  }\n};\n\nexport default authAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
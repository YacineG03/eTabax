import React, { useEffect, useState } from 'react';
import chefChantierAPI from '../../../api/chefChantier';
import './PointageOuvriers.css';
import { toast } from 'react-toastify';
import { FaEdit, FaTrash, FaUserCheck, FaSpinner, FaToggleOn, FaToggleOff } from 'react-icons/fa';

export default function PointageOuvriers() {
  const [ouvriers, setOuvriers] = useState([]);
  const [pointages, setPointages] = useState([]);
  const [loading, setLoading] = useState(false);

  const [showForm, setShowForm] = useState(false);
  const [form, setForm] = useState({
    nom: '', prenom: '', sexe: '', age: '', telephone: '', adresse: ''
  });
  const [editId, setEditId] = useState(null);
  const [showConfirm, setShowConfirm] = useState(false);
  const [pointageToEdit, setPointageToEdit] = useState(null);

  const fetchData = async () => {
    setLoading(true);
    try {
      const ouvriersRes = await chefChantierAPI.getOuvriers();
      const pointagesRes = await chefChantierAPI.getPointages();
      setOuvriers(ouvriersRes.ouvriers || []);
      setPointages(pointagesRes.pointages || []);
    } catch (e) {
      toast.error("Erreur lors du chargement des donn√©es ‚ùå");
      setOuvriers([]);
      setPointages([]);
    }
    setLoading(false);
  };

  useEffect(() => { fetchData(); }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      if (editId) {
        await chefChantierAPI.updateOuvrier(editId, form);
        toast.success("Ouvrier modifi√© avec succ√®s ‚úèÔ∏è");
      } else {
        await chefChantierAPI.createOuvrier(form);
        toast.success("Ouvrier ajout√© avec succ√®s ‚úÖ");
      }
      setForm({ nom: '', prenom: '', sexe: '', age: '', telephone: '', adresse: '' });
      setEditId(null);
      setShowForm(false);
      fetchData();
    } catch (err) {
      toast.error("Erreur lors de la soumission ‚ùå");
    }
  };

  const handleEdit = (ouvrier) => {
    setForm({
      nom: ouvrier.nom || '',
      prenom: ouvrier.prenom || '',
      sexe: ouvrier.sexe || '',
      age: ouvrier.age || '',
      telephone: ouvrier.telephone || '',
      adresse: ouvrier.adresse || ''
    });
    setEditId(ouvrier.id);
    setShowForm(true);
  };

  const handleDelete = async (id) => {
    try {
      await chefChantierAPI.deleteOuvrier(id);
      toast.success("Ouvrier supprim√© üóëÔ∏è");
      fetchData();
    } catch (err) {
      toast.error("Erreur lors de la suppression ‚ùå");
    }
  };

  const handlePointer = async (ouvrierId, present) => {
    try {
      await chefChantierAPI.pointerOuvrier({ ouvrierId, present });
      toast.success(`Ouvrier marqu√© comme ${present ? 'pr√©sent' : 'absent'} üë∑`);
      fetchData();
    } catch (err) {
      toast.error("Erreur de pointage ‚ùå");
    }
  };

  const timestampToDate = (timestamp) => {
    if (!timestamp) return null;
    if (typeof timestamp.toDate === 'function') return timestamp.toDate();
    if (timestamp._seconds !== undefined) {
      return new Date(timestamp._seconds * 1000 + Math.floor(timestamp._nanoseconds / 1000000));
    }
    return null;
  };

  const getPointageDuJour = (ouvrierId) => {
    const today = new Date().toISOString().slice(0, 10);
    return pointages.find((p) => {
      const pointageDate = timestampToDate(p.date);
      if (!pointageDate) return false;
      const pointageDay = pointageDate.toISOString().slice(0, 10);
      return p.ouvrierId === ouvrierId && pointageDay === today;
    });
  };

  const handleTogglePointage = async (pointage) => {
  try {
    await chefChantierAPI.updatePointage(pointage.id, { present: !pointage.present });
    toast.success(`Pointage mis √† jour : ${!pointage.present ? 'Pr√©sent' : 'Absent'}`);
    fetchData();
  } catch (err) {
    toast.error("Erreur lors de la mise √† jour du pointage ‚ùå");
  }
};

  return (
    <div className="pointage-container">
      <h3>Gestion des ouvriers</h3>

      <div className="header-actions">
        <button className="btn-ajouter" onClick={() => {
          setShowForm(true);
          setEditId(null);
          setForm({ nom: '', prenom: '', sexe: '', age: '', telephone: '', adresse: '' });
        }}>
          + Ajouter un ouvrier
        </button>
      </div>

      {showForm && (
        <div className="modal-form">
          <form className="ouvrier-form" onSubmit={handleSubmit}>
            <input placeholder="Nom" value={form.nom} onChange={e => setForm({ ...form, nom: e.target.value })} required />
            <input placeholder="Pr√©nom" value={form.prenom} onChange={e => setForm({ ...form, prenom: e.target.value })} required />
            <select value={form.sexe} onChange={e => setForm({ ...form, sexe: e.target.value })} required>
              <option value="">Sexe</option>
              <option value="Homme">Homme</option>
              <option value="Femme">Femme</option>
            </select>
            <input type="number" placeholder="√Çge" value={form.age} onChange={e => setForm({ ...form, age: e.target.value })} required min="16" />
            <input placeholder="T√©l√©phone" value={form.telephone} onChange={e => setForm({ ...form, telephone: e.target.value })} required />
            <input placeholder="Adresse" value={form.adresse} onChange={e => setForm({ ...form, adresse: e.target.value })} required />
            <button type="submit">{editId ? 'Modifier' : 'Ajouter'}</button>
            <button type="button" onClick={() => { setShowForm(false); setEditId(null); }}>Annuler</button>
          </form>
        </div>
      )}

      {loading ? (
        <div className="loader">
          <FaSpinner className="spin" size={30} />
          Chargement des ouvriers...
        </div>
      ) : (
        <>
          <table className="ouvriers-table">
            <thead>
              <tr>
                <th>Nom</th>
                <th>Pr√©nom</th>
                <th>Sexe</th>
                <th>√Çge</th>
                <th>T√©l√©phone</th>
                <th>Adresse</th>
                <th>Actions</th>
                <th>Pointage</th>
              </tr>
            </thead>
            <tbody>
              {ouvriers.map((o) => (
                <tr key={o.id}>
                  <td>{o.nom}</td>
                  <td>{o.prenom}</td>
                  <td>{o.sexe}</td>
                  <td>{o.age}</td>
                  <td>{o.telephone}</td>
                  <td>{o.adresse}</td>
                  <td>
                    <button className="icon-btn" onClick={() => handleEdit(o)}><FaEdit /></button>
                    <button className="icon-btn" onClick={() => handleDelete(o.id)}><FaTrash /></button>
                  </td>
                  <td>
                    {(() => {
                      const pointage = getPointageDuJour(o.id);
                      if (pointage) {
                        return pointage.present ? (
                          <div className="pointage-status">
                            <span className="badge-present"><FaUserCheck /> Pr√©sent</span>
                            <button className="btn-modifier" onClick={() => handleTogglePointage(pointage)}>Modifier</button>
                          </div>
                        ) : (
                          <div className="pointage-status">
                            <span className="badge-absent">Absent</span>
                            <button className="btn-modifier" onClick={() => handleTogglePointage(pointage)}>Modifier</button>
                          </div>
                        );
                      } else {
                        return (
                          <div className="pointage-actions">
                            <button className="btn-present" onClick={() => handlePointer(o.id, true)}>Pr√©sent</button>
                            <button className="btn-absent" onClick={() => handlePointer(o.id, false)}>Absent</button>
                          </div>
                        );
                      }
                    })()}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          {showConfirm && pointageToEdit && (
            <div className="modal-form">
              <div className="confirm-box">
                <p>
                  Le pointage actuel est :{' '}
                  <strong style={{ color: pointageToEdit.present ? '#155724' : '#721c24' }}>
                    {pointageToEdit.present ? 'Pr√©sent' : 'Absent'}
                  </strong>
                </p>
                <p>Voulez-vous le modifier ?</p>
              </div>
            </div>
          )}
        </>
      )}
    </div>
  );
}
======================
import React, { useEffect, useState } from 'react';
import chefChantierAPI from '../../../api/chefChantier';
import './MeteoPlanning.css';
import { toast } from 'react-toastify';

export default function MeteoPlanning() {
  const [ville, setVille] = useState('Dakar');
  const [meteo, setMeteo] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(async (pos) => {
        const { latitude, longitude } = pos.coords;
        fetchVilleParCoordonnees(latitude, longitude);
      }, () => {
        toast.warn("Impossible d'acc√©der √† la localisation. Ville par d√©faut : Dakar");
        fetchMeteo('Dakar');
      });
    } else {
      toast.warn("G√©olocalisation non support√©e. Ville par d√©faut : Dakar");
      fetchMeteo('Dakar');
    }
  }, []);

  const fetchVilleParCoordonnees = async (lat, lon) => {
    try {
      const res = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`);
      const data = await res.json();
      const villeDetectee = data?.address?.city || data?.address?.town || 'Dakar';
      setVille(villeDetectee);
      fetchMeteo(villeDetectee);
    } catch {
      toast.error("Erreur localisation. Ville par d√©faut utilis√©e.");
      fetchMeteo('Dakar');
    }
  };

  const fetchMeteo = async (villeChoisie) => {
    setLoading(true);
    try {
      const res = await chefChantierAPI.getMeteo(villeChoisie);
      setMeteo(res);
    } catch {
      toast.error("Erreur lors de la r√©cup√©ration de la m√©t√©o ‚ùå");
      setMeteo(null);
    }
    setLoading(false);
  };

  const handleVilleChange = (e) => {
    setVille(e.target.value);
  };

  const handleVilleSubmit = (e) => {
    e.preventDefault();
    fetchMeteo(ville);
  };

  return (
    <div className="meteo-container">
      <h2>M√©t√©o & Planning</h2>

      <form onSubmit={handleVilleSubmit} className="ville-form">
        <input value={ville} onChange={handleVilleChange} placeholder="Entrez une ville" />
        <button type="submit">Rechercher</button>
      </form>

      {loading ? (
        <p>Chargement m√©t√©o...</p>
      ) : meteo && meteo.success ? (
        <>
          <div className="meteo-box">
            <h3>{meteo.city || ville}</h3>
            <p><strong>Condition :</strong> {meteo.weather?.description || 'Non sp√©cifi√©'}</p>
            <p><strong>Temp√©rature :</strong> {meteo.weather?.temperature} ¬∞C</p>
            <p><strong>Humidit√© :</strong> {meteo.weather?.humidity} %</p>
            <p><strong>Vent :</strong> {meteo.weather?.wind_speed} km/h</p>
          </div>

          {meteo.forecast && meteo.forecast.length > 0 && (
            <div className="forecast-container">
              <h4>Pr√©visions m√©t√©o √† venir</h4>
              <ul>
                {meteo.forecast.map((item, index) => (
                  <li key={index}>
                    <strong>{item.dt_txt}</strong> - {item.description}, {item.temperature} ¬∞C, humidit√©: {item.humidity} %, vent: {item.wind_speed} km/h
                  </li>
                ))}
              </ul>
            </div>
          )}
        </>
      ) : (
        <p>M√©t√©o non disponible.</p>
      )}

      <div className="planning-container">
        <h3>Planning de la journ√©e</h3>
        <p>Consultez le planning des travaux pour la journ√©e en cours.</p>
        {/* Int√®gre ici ton planning ou liste des t√¢ches */}
      </div>
    </div>
  );
}
